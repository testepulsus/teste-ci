name: Deploy to Amazon ECS

on:
  workflow_call:
    inputs:
      ecr-repository:
        required: true
        type: string
      ecs-task-definition:
        required: true
        type: string
      container-name:
        required: true
        type: string
      ecs-service:
        required: true
        type: string
      ecs-cluster:
        required: true
        type: string
      ecs-appspec:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    environment: staging
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: ${{ inputs.ecr-repository }}
      ECS_TASK_DEFINITION: ${{ inputs.ecs-task-definition }}
      CONTAINER_NAME: ${{ inputs.container-name }}
      ECS_SERVICE: ${{ inputs.ecs-service }}
      ECS_CLUSTER: ${{ inputs.ecs-cluster }}
      ECS_APPSPEC: ${{ inputs.ecs-appspec }}
      DOCKERFILE: ${{ inputs.dockerfile }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f $DOCKERFILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          codedeploy-appspec: ${{ env.ECS_APPSPEC }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
